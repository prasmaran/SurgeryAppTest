package com.example.surgeryapptest.ui.activity

import android.annotation.SuppressLint
import android.app.DownloadManager
import android.content.BroadcastReceiver
import android.content.Context
import android.content.Intent
import android.content.IntentFilter
import android.graphics.Bitmap
import android.net.Uri
import android.os.Bundle
import android.os.Handler
import android.os.Looper
import android.view.KeyEvent
import android.view.View
import android.webkit.WebResourceError
import android.webkit.WebResourceRequest
import android.webkit.WebView
import android.webkit.WebViewClient
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import androidx.navigation.navArgs
import com.example.surgeryapptest.databinding.ActivityGeneralInfoWebBinding

class GeneralInfoWebActivity : AppCompatActivity() {


    private val args by navArgs<GeneralInfoWebActivityArgs>()
    private lateinit var binding: ActivityGeneralInfoWebBinding

    /**
     * testing
     */
    var reportLoadError = false
    var queId: Long? = null
    lateinit var receiver: BroadcastReceiver
    private lateinit var downloadManager: DownloadManager
    private val pdfUrl = "https://res.cloudinary.com/pras9999assets/image/upload/v1639673333/u6y9stgspz3r1xxm4kgf.pdf"

    @SuppressLint("SetJavaScriptEnabled")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityGeneralInfoWebBinding.inflate(layoutInflater)
        val view = binding.root
        setContentView(view)

        initWebView()
        initShare()
        initBroadcastReceiver()
        registerReceiver(receiver, IntentFilter(DownloadManager.ACTION_DOWNLOAD_COMPLETE))

//        val articleID = args.selectedArticle.articleId
//        val articleTitle = args.selectedArticle.articleTitle
//        val articleURL = args.selectedArticle.articleLink
//
//        supportActionBar?.setDisplayHomeAsUpEnabled(true)
//        supportActionBar?.title = "Article $articleID"
//        supportActionBar?.subtitle = articleTitle
//
//        binding.generalInfoWebView.webViewClient = WebViewClient()
//        binding.generalInfoWebView.apply {
//            loadUrl(articleURL)
//            settings.javaScriptEnabled = true
//            settings.setSupportZoom(true)
//        }
//
//        Handler(Looper.getMainLooper()).postDelayed({
//            binding.webLoadingTv.visibility = View.GONE
//        }, 2500)
    }

//    override fun onKeyDown(keyCode: Int, event: KeyEvent?): Boolean {
//        if (keyCode == KeyEvent.KEYCODE_BACK && binding.generalInfoWebView.canGoBack()) {
//            binding.generalInfoWebView.goBack()
//            return true
//        }
//        return super.onKeyDown(keyCode, event)
//    }
//
//    override fun onSupportNavigateUp(): Boolean {
//        onBackPressed()
//        return true
//        //return super.onSupportNavigateUp()
//    }

    /*
    * Broadcast receiver which handles result of file download
    *
    * */
    private fun initBroadcastReceiver() {
        receiver = object : BroadcastReceiver() {
            override fun onReceive(p0: Context?, p1: Intent?) {
                toast("On Receive")
                val action = p1!!.action
                if (DownloadManager.ACTION_DOWNLOAD_COMPLETE == action) {
                    var requestQuery = DownloadManager.Query()
                    requestQuery.setFilterById(queId!!)
                    val cursor = downloadManager.query(requestQuery)
                    if (cursor.moveToFirst()) {
                        val columnIndex = cursor.getColumnIndex(DownloadManager.COLUMN_STATUS)
                        if (DownloadManager.STATUS_SUCCESSFUL == cursor.getInt(columnIndex)) {
                            toast("Download Completed")
                            val uriString =
                                cursor.getString(cursor.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI))
                            val uri = Uri.parse(uriString)
                            val share = Intent()
                            share.action = Intent.ACTION_SEND
                            share.type = "application/pdf"
                            share.putExtra(Intent.EXTRA_STREAM, uri)
                            startActivity(share)
                        } else if (DownloadManager.STATUS_FAILED == cursor.getInt(columnIndex)) {
                            toast("Download Failed")
                        }
                    }

                }
            }

        }
    }

    /*
    * Function which starts dowloading the file from griven url
    * */
    private fun initShare() {
        binding.webLoadingTv.setOnClickListener {
            toast("Downloading...")
            downloadManager = getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager
            val uri =
                Uri.parse(pdfUrl)
            val request: DownloadManager.Request = DownloadManager.Request(uri)
            request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)
            queId = downloadManager.enqueue(request)

        }
    }

    /*
    * Function which loads content in to webview
    * */
    private fun initWebView() {
        reportLoadError = false

        binding.generalInfoWebView.webViewClient = object : WebViewClient() {
            override fun onPageStarted(webview: WebView, url: String, favicon: Bitmap?) {
                webview.visibility = View.INVISIBLE
            }

            override fun onPageFinished(view: WebView, url: String) {

                //handles load error
                if (reportLoadError) {
                    toast("Error in downloading...")
                    //handles successfull pdf load
                } else {
                    view.visibility = View.VISIBLE
                }
                super.onPageFinished(view, url)

            }

            override fun onReceivedError(
                view: WebView?,
                request: WebResourceRequest?,
                error: WebResourceError?
            ) {
                reportLoadError = true

            }

            override fun shouldOverrideUrlLoading(
                view: WebView?,
                request: WebResourceRequest?
            ): Boolean {
                view!!.loadUrl(request!!.url.toString())
                return false
            }

        }
        binding.generalInfoWebView.settings.javaScriptEnabled = true
        binding.generalInfoWebView.settings.domStorageEnabled = true
        binding.generalInfoWebView.overScrollMode = WebView.OVER_SCROLL_NEVER

        binding.generalInfoWebView.loadUrl("https://drive.google.com/viewerng/viewer?embedded=true&url=$pdfUrl")

    }

}

// Extension function to show a simple toast
fun Context.toast(msg: String) {
    Toast.makeText(this, msg, Toast.LENGTH_LONG).show()
}